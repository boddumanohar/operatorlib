// Code generated by MockGen. DO NOT EDIT.
// Source: argp.in/go/operatorlib/pkg/interfaces (interfaces: Reconcile)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockReconcile is a mock of Reconcile interface
type MockReconcile struct {
	ctrl     *gomock.Controller
	recorder *MockReconcileMockRecorder
}

// MockReconcileMockRecorder is the mock recorder for MockReconcile
type MockReconcileMockRecorder struct {
	mock *MockReconcile
}

// NewMockReconcile creates a new mock instance
func NewMockReconcile(ctrl *gomock.Controller) *MockReconcile {
	mock := &MockReconcile{ctrl: ctrl}
	mock.recorder = &MockReconcileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReconcile) EXPECT() *MockReconcileMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockReconcile) GetClient() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockReconcileMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockReconcile)(nil).GetClient))
}

// GetScheme mocks base method
func (m *MockReconcile) GetScheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// GetScheme indicates an expected call of GetScheme
func (mr *MockReconcileMockRecorder) GetScheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheme", reflect.TypeOf((*MockReconcile)(nil).GetScheme))
}
